{"version":3,"sources":["app.js","controllers/chatcontroller.js","controllers/taskcontroller.js","directives/countdown.js","directives/scroll.js","directives/taskrepeat.js","services/taskService.js"],"names":[],"mappingsnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"chat.js","sourcesContent":["\r\n\r\nvar app = angular.module('chat',['ngRoute','luegg.directives','countdownTimer','datatables',\"ngTable\"]);\r\n\r\n    app.config(['$routeProvider', function($routeProvider) {\r\n        //$routeProvider.defaults.headers.common[\"X-Requested-With\"] = 'XMLHttpRequest';\r\n        try {\r\n            $routeProvider.when('/chat', {\r\n                templateUrl: '/partials/chat.blade.php',\r\n                controller: 'chatcontroller',\r\n            }).when('/task', {\r\n                templateUrl: '/task/index.blade.php',\r\n                controller: 'taskcontroller',\r\n            }).\r\n                otherwise({\r\n                    redirectTo: '/'\r\n                });\r\n        }catch(e){\r\n            console.log('catch: ' +e);\r\n        }\r\n        //$routeProvider.interceptors.push(function($q) {\r\n        //    return {\r\n        //        responseError: function(rejection) {\r\n        //            if(rejection.status <= 0) {\r\n        //                window.location = \"chat.blade.php\";\r\n        //                return;\r\n        //            }\r\n        //            return $q.reject(rejection);\r\n        //        }\r\n        //    };\r\n        //});\r\n    }\r\n    ]);\r\n\r\n    app.factory('message',function($http) {\r\n\r\n        return {\r\n            msg : function (value) {\r\n                $http.post('/chat/sendmessage', value).success(function (data) {\r\n                    console.log(data);\r\n                    //socket.emit('join', data);\r\n                })\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n\r\n    app.factory('socket',function($rootScope){\r\n\r\n        var socket = io.connect(\"http://www.pm.local:3000/\");\r\n\r\n\r\n        return {\r\n            on: function (eventName, callback) {\r\n                socket.on(eventName, function () {\r\n                    var args = arguments;\r\n                    $rootScope.$apply(function () {\r\n                        callback.apply(socket, args);\r\n                    });\r\n                });\r\n\r\n            },\r\n\r\n\r\n            emit: function (eventName, data, callback) {\r\n                socket.emit(eventName, data, function () {\r\n                    var args = arguments;\r\n                    $rootScope.$apply(function () {\r\n                        if (callback) {\r\n                            callback.apply(socket, args);\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n\r\n});","\r\n    var app=angular.module('chat');\r\n    app.controller('chatcontroller', function($scope,socket ,message,$http,$timeout, $location,$anchorScroll){\r\n\r\n        var j=angular.element;\r\n\r\n\r\n        $scope.users=[];\r\n        $scope.data=[];\r\n        //$scope.input='';\r\n        //$scope.glued = true;\r\n\r\n        //--join char--//\r\n        $scope.joinChat = function(){\r\n            $('.chat, .chat1').slideDown();\r\n            //$('.chat1').slideDown();\r\n            $('.join').hide();\r\n                  $http.get('/chat/join').success(function(data){\r\n                       // console.log(data);\r\n                        socket.emit('join',data);\r\n                  })\r\n        };\r\n\r\n        socket.on('join',function(data){\r\n            $scope.users.push(data);\r\n            $scope.data.push( {\r\n                joined : data.name+' has joined',\r\n            });\r\n            console.log($scope.data);\r\n        });\r\n\r\n        //leave chat--//\r\n        $scope.leaveChat = function(user){\r\n            $('.chat, .join').slideUp();\r\n            console.log(user)\r\n            socket.emit('leave',user+' has left');\r\n\r\n\r\n        };\r\n        socket.on('leave',function(name){\r\n            console.log(name);\r\n            $scope.data.push({joined:name});\r\n            $scope.users.splice(name,1);\r\n            socket.emit('disconnect');\r\n        })\r\n\r\n        socket.on('message',function(data){\r\n           // $scope.$watch(function() { $timeout(scrollIfGlued, 100, false); });\r\n            console.log(JSON.parse(data));\r\n            data=JSON.parse(data);\r\n            $scope.data.push(data);\r\n\r\n        })\r\n\r\n        //--send message==//\r\n        $scope.sendMessage=function(){\r\n            var value=$scope.input;\r\n            var data= message.msg({value:value});\r\n            $scope.input=\"\";\r\n            console.log(data);\r\n        }\r\n        socket.on('chat',function(data){\r\n            console.log(data);\r\n        })\r\n\r\n\r\n\r\n\r\n      //<--!$uery-->\r\n        //$('.chat').hide();\r\n        $('#showchat').on('click',function(){\r\n            $('.join').slideDown();\r\n        });\r\n        //j('.window').unbind('click');\r\n        j('.window').off().on('click',function(){\r\n            //e.stopImmediatePropagation()    //-- another solution for dubble slide\r\n            j('.chat1').slideToggle();\r\n\r\n        });\r\n\r\n\r\n\r\n    });\r\n","/**\r\n * Created by cube7r on 8/31/2016.\r\n */\r\n\r\nangular.module('chat').controller('taskcontroller',function($scope,taskService,$interval,$timeout,$element, NgTableParams){\r\n    $scope.tasks=[];\r\n    $scope.data=[];\r\n\r\n    angular.element(document).ready(function () {\r\n\r\n        $('#modal').on('hidden.bs.modal', function () {\r\n            $(this).removeData('bs.modal');\r\n        });\r\n\r\n        //console.log($element.find('.name').css('color','red'));\r\n\r\n        //taskService.getAll().then(function (res) {\r\n        //    $scope.data=[];\r\n        //    $scope.data=res.data ;\r\n        //})\r\n\r\n\r\n\r\n\r\n    });\r\n\r\n    var p=$interval(function () {\r\n        taskService.getAll().then(function (res) {\r\n            // $scope.data = [];\r\n            $scope.data = res.data;\r\n            // $scope.$digest();\r\n        })\r\n    }, 1000);\r\n\r\n    var self = this;\r\n    self.tableParams= new NgTableParams({\r\n        page: 1,            // show first page\r\n        count: 10 },\r\n        { dataset: $scope.tasks,\r\n\r\n        });\r\n\r\n    $scope.$watch('data',function(newvalue) {\r\n        if (newvalue) {\r\n            //$interval.cancel(p);\r\n            //p;\r\n            $scope.tasks = newvalue;\r\n            $interval(function () {\r\n\r\n                $element.find('.status').each(function (st) {\r\n                    //console.log(el1);\r\n                    //console.log(el2);\r\n                    var color=$(this);\r\n                    var status = $(this).text(), status1 = $(this).attr('value');\r\n                    if(status=='Expired' )\r\n                        color.css({'background-color': 'yellow'});\r\n\r\n                    if(status=='Closed') {\r\n                        color.css({'background-color': 'blue'});\r\n                    }\r\n\r\n                    $element.find('.closetask').each(function (cl) {\r\n                    //console.log($(this).href)`\r\n                        var close=$(this);\r\n\r\n\r\n                     if($(this).attr('value')=='Open'){\r\n                        close.show();\r\n                    }\r\n\r\n\r\n\r\n                    });\r\n                });\r\n            })\r\n        }\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n});\r\n","\r\n","/**\r\n * Created by cube7r on 8/18/2016.\r\n */\r\n\r\n    angular.module('chat').directive('scrollBottom',function($timeout){\r\n\r\n        //qvar j= $.noConflict();\r\n            return{\r\n                controller:'chatcontroller',\r\n\r\n                scope:{\r\n                    list:'=scrollBottom'\r\n                },\r\n                link:function($scope, $element){\r\n                    $scope.$watchCollection('list',function(newValue){\r\n\r\n                        if(newValue){\r\n                            $timeout(function(){\r\n                                $element.scrollTop($element[0].scrollHeight);\r\n                            }, 0);\r\n\r\n                        }\r\n\r\n                    });\r\n\r\n                }\r\n\r\n            }\r\n        });","\r\nangular.module('chat').directive('taskrepeat',function($timeout){\r\n\r\n  return{\r\n      controller:'taskcontroller',\r\n      //link: link,\r\n      replace: true,\r\n      restrict: \"E\",\r\n      //scope: {\r\n      //    list: \"=\"\r\n      //},\r\n\r\n      link:function(scope,element,attr){\r\n          if(element.length>0){\r\n              console.log(element.length)\r\n          }\r\n\r\n\r\n  },\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n});","/**\r\n * Created by cube7r on 8/31/2016.\r\n */\r\nangular.module('chat').factory('taskService',function($http,$q){\r\n\r\n       return {\r\n          getAll :function () {\r\n              defer=$q.defer();\r\n\r\n              return $http.get('/task')\r\n                   .success(function (response) {\r\n                       //console.log(response);\r\n                       //return response;\r\n                       defer.resolve();\r\n                   }).error(function (error) {\r\n                       return error;\r\n                       defer.reject(error);\r\n                   })\r\n               return defer.promise;\r\n       }\r\n}\r\n\r\n\r\n});\r\n"],"sourceRoot":"/source/"}